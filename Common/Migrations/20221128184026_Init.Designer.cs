// <auto-generated />
using System;
using Common.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Common.Migrations
{
    [DbContext(typeof(EntityContext))]
    [Migration("20221128184026_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Common.Database.Models.Account", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<byte>("AccountType")
                        .HasColumnType("tinyint unsigned");

                    b.Property<uint>("CharacterSlots")
                        .HasColumnType("int unsigned");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("HasAcceptedEula")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastKnownIpAddress")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastLoggedInAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastWorldId")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSaltHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PicHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PicSaltHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PinHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PinSaltHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<Guid?>("RestrictionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("RestrictionId")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Common.Database.Models.AccountRestriction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<uint>("AccountId")
                        .HasColumnType("int unsigned");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<uint?>("IssuedByAccountId")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AccountRestrictions");
                });

            modelBuilder.Entity("Common.Database.Models.Character", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<ushort>("AbilityPoints")
                        .HasColumnType("smallint unsigned");

                    b.Property<uint>("AccountId")
                        .HasColumnType("int unsigned");

                    b.Property<byte>("BuddyLimit")
                        .HasColumnType("tinyint unsigned");

                    b.Property<ushort>("Dexterity")
                        .HasColumnType("smallint unsigned");

                    b.Property<uint>("Experience")
                        .HasColumnType("int unsigned");

                    b.Property<bool>("ExperienceLocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<uint>("Face")
                        .HasColumnType("int unsigned");

                    b.Property<ushort>("Fame")
                        .HasColumnType("smallint unsigned");

                    b.Property<ushort>("Foothold")
                        .HasColumnType("smallint unsigned");

                    b.Property<uint>("GachaponExperience")
                        .HasColumnType("int unsigned");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<byte>("HairColor")
                        .HasColumnType("tinyint unsigned");

                    b.Property<uint>("HairStyle")
                        .HasColumnType("int unsigned");

                    b.Property<ushort>("HitPoints")
                        .HasColumnType("smallint unsigned");

                    b.Property<ushort>("Intelligence")
                        .HasColumnType("smallint unsigned");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("char(36)");

                    b.Property<ushort>("Job")
                        .HasColumnType("smallint unsigned");

                    b.Property<byte>("Level")
                        .HasColumnType("tinyint unsigned");

                    b.Property<bool>("LevelLocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<ushort>("Luck")
                        .HasColumnType("smallint unsigned");

                    b.Property<ushort>("ManaPoints")
                        .HasColumnType("smallint unsigned");

                    b.Property<uint>("MapId")
                        .HasColumnType("int unsigned");

                    b.Property<ushort>("MaxHitPoints")
                        .HasColumnType("smallint unsigned");

                    b.Property<ushort>("MaxManaPoints")
                        .HasColumnType("smallint unsigned");

                    b.Property<uint>("Mesos")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<ushort>("SkillPoints")
                        .HasColumnType("smallint unsigned");

                    b.Property<byte>("SkinColor")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("SpawnPoint")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("Stance")
                        .HasColumnType("tinyint unsigned");

                    b.Property<ushort>("Strength")
                        .HasColumnType("smallint unsigned");

                    b.Property<ushort>("SubJob")
                        .HasColumnType("smallint unsigned");

                    b.Property<int>("WorldId")
                        .HasColumnType("int");

                    b.Property<ushort>("X")
                        .HasColumnType("smallint unsigned");

                    b.Property<ushort>("Y")
                        .HasColumnType("smallint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("InventoryId")
                        .IsUnique();

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Common.Database.Models.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<byte>("CashTabSlots")
                        .HasColumnType("tinyint unsigned");

                    b.Property<uint>("CharacterId")
                        .HasColumnType("int unsigned");

                    b.Property<byte>("ConsumableTabSlots")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("EquippableTabSlots")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("EtceteraTabSlots")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("SetupTabSlots")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("Common.Database.Models.InventoryTabItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<ushort>("Accuracy")
                        .HasColumnType("smallint unsigned");

                    b.Property<ushort>("AttackPower")
                        .HasColumnType("smallint unsigned");

                    b.Property<ushort>("Avoidability")
                        .HasColumnType("smallint unsigned");

                    b.Property<byte>("BonusUpgradeSlots")
                        .HasColumnType("tinyint unsigned");

                    b.Property<ushort>("Dexterity")
                        .HasColumnType("smallint unsigned");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<ushort>("HitPoints")
                        .HasColumnType("smallint unsigned");

                    b.Property<ushort>("Intelligence")
                        .HasColumnType("smallint unsigned");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("char(36)");

                    b.Property<int>("InventoryTab")
                        .HasColumnType("int");

                    b.Property<bool>("IsNxItem")
                        .HasColumnType("tinyint(1)");

                    b.Property<ushort>("Jump")
                        .HasColumnType("smallint unsigned");

                    b.Property<ushort>("Luck")
                        .HasColumnType("smallint unsigned");

                    b.Property<ushort>("MagicalDefense")
                        .HasColumnType("smallint unsigned");

                    b.Property<ushort>("MagicalPower")
                        .HasColumnType("smallint unsigned");

                    b.Property<ushort>("ManaPoints")
                        .HasColumnType("smallint unsigned");

                    b.Property<uint>("MapleId")
                        .HasColumnType("int unsigned");

                    b.Property<string>("NameTag")
                        .HasColumnType("longtext");

                    b.Property<ushort>("PhysicalDefense")
                        .HasColumnType("smallint unsigned");

                    b.Property<ushort>("Quantity")
                        .HasColumnType("smallint unsigned");

                    b.Property<byte>("Slot")
                        .HasColumnType("tinyint unsigned");

                    b.Property<ushort>("Speed")
                        .HasColumnType("smallint unsigned");

                    b.Property<ushort>("Strength")
                        .HasColumnType("smallint unsigned");

                    b.Property<ushort>("UpgradesApplied")
                        .HasColumnType("smallint unsigned");

                    b.Property<ushort>("UpgradesAvailable")
                        .HasColumnType("smallint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("InventoryTabItems");
                });

            modelBuilder.Entity("Common.Database.Models.Account", b =>
                {
                    b.HasOne("Common.Database.Models.AccountRestriction", "Restriction")
                        .WithOne("Account")
                        .HasForeignKey("Common.Database.Models.Account", "RestrictionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Restriction");
                });

            modelBuilder.Entity("Common.Database.Models.Character", b =>
                {
                    b.HasOne("Common.Database.Models.Account", "Account")
                        .WithMany("Characters")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Database.Models.Inventory", "Inventory")
                        .WithOne("Character")
                        .HasForeignKey("Common.Database.Models.Character", "InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("Common.Database.Models.InventoryTabItem", b =>
                {
                    b.HasOne("Common.Database.Models.Inventory", "Inventory")
                        .WithMany("TabItems")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("Common.Database.Models.Account", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("Common.Database.Models.AccountRestriction", b =>
                {
                    b.Navigation("Account");
                });

            modelBuilder.Entity("Common.Database.Models.Inventory", b =>
                {
                    b.Navigation("Character");

                    b.Navigation("TabItems");
                });
#pragma warning restore 612, 618
        }
    }
}
